# add a random secret to `jwt_secret`, and uncomment.. This secret is used to sign and verify authenticated
# user JWTs, which are stored as cookies in the user's browser. If you do not provide a jwt_secret,
# one will be randomly generated by each ConsoleMe instance.
# If you are load balancing requests between multiple ConsoleMe instances,
# the user will fail authentication when their request hits an instance other than the one that generated their
# auth cookie.
jwt_secret: sXyktpFqb3mKBxZEZ8hdrkxSmso9vLLX

tornado:
  debug: true
  port: 8081
  # xsrf: true
  xsrf: false                   # FIXME: set xsrf to false to allow testing with POSTMAN, must set to true in prod
  uvloop: false

# Challenge URL authentication is used to authenticate users from CLI clients (like Weep).
challenge_url:
  enabled: true

# Enter your team's e-mail address here. This e-mail will be used as the default approvers of IAM policy requests
application_admin: mikec@remitly.com
development: true
environment: sandbox

# impersonate admin under development mode to bypass auth
_development_user_override: mikecrequester@remitly.com
_development_groups_override:
  - consoleme_not_admins


logging:
  stdout_enabled: true
  format: "%(asctime)s - %(levelname)s - %(name)s - [%(filename)s:%(lineno)s - %(funcName)s() ] - %(message)s"
  level: debug
  file: /logs/consoleme/consoleme_tornado.log

# ConsoleMe needs to know about your AWS accounts. ConsoleMe can retrieve a list of your accounts from the following
# sources:
# 1) Your local configuration file (See the account_ids_to_name key below)
# 2) AWS Organizations (See the cache_accounts_from_aws_organizations key below)
# 3) Swag ( https://github.com/Netflix-Skunkworks/swag-api) (See the retrieve_accounts_from_swag key below)
# 4) Your current AWS credentials. If you do not configure any sources to retrieve information about your AWS accounts,
#    ConsoleMe will use the current credentials and attempt to determine account information. If Celery tasks are ran,
#    ConsoleMe will attempt to sync resources from this account.
account_ids_to_name:
  "383328610803": aws_gov_sandbox_account

# ConsoleMe can cache account, org structure, and SCPs from AWS Organizations in one or more accounts
#cache_accounts_from_aws_organizations:
#  # This is the account ID of your AWS organizations master
#  - organizations_master_account_id: "123456789012"
#    # This is the name of the role that consoleme will attempt to assume on your Organizations master account to retrieve
#    # account information. Ensure that ConsoleMe can assume this role, and that this role has the permissions:
#    # organizations:DescribeAccount
#    # organizations:DescribeOrganizationalUnit
#    # organizations:DescribePolicy
#    # organizations:ListAccounts
#    # organizations:ListChildren
#    # organizations:ListPolicies
#    # organizations:ListRoots
#    # organizations:ListTargetsForPolicy
#    organizations_master_role_to_assume: "ConsoleMe"


cloud_credential_authorization_mapping:
  role_tags:
    enabled: true
    required_trust_policy_entity: arn:aws:iam::383328610803:role/consolemeInstanceProfile
    authorized_groups_tags:
      - consoleme-authorized
    authorized_groups_cli_only_tags:
      - consoleme-authorized-cli-only
  dynamic_config:
    enabled: true
  internal_plugin:
    enabled: false

# This is where you can define groups that can modify ConsoleMe's dynamic configuration and administer
# IAM/S3/SQS/SNS policies.
groups:
  can_edit_config:
    - mikec@remitly.com
  can_admin_policies:
    - mikec@remitly.com
 # can_admin:
 #   - admin@example.com
 # developement_notification_emails:
 #   - developer@example.com
 # can_edit_policies:
 #   - policyeditors@example.com

aws:
  issuer: Remitly
  region: "us-west-1"

# If you want to retrieve credentials through mutual TLS, you'll need to use something fronting ConsoleMe to do the
# certificate validation. It should pass down a "Success" header, and a header with the certificate. You'll need to
# implement your own certificate parsing logic.
# Refer to consoleme/default_plugins/plugins/auth/auth.py
# cli_auth:
#   certificate_header: certificate_header
#   required_headers:
#     - RequiredMTLSHeader: RequiredMTLSHeaderValue


# You'll probably want to override default_plugins logic to generate this data with your own business logic.
# TODO what is this?
application_settings:
  application_1:
    owner: mikec@remitly.com
    owner_url: https://www.example.com/groupa@example.com
    app_url: https://www.example.com/ci_cd_pipeline/application_1
    roles:
      - arn:aws:iam::383328610803:role/ConsoleMeAppA
  application_2:
    owner: mikec@remitly.com
    owner_url: https://www.example.com/groupb@example.com
    app_url: https://www.example.com/ci_cd_pipeline/application_2
    roles:
      - arn:aws:iam::383328610803:role/ConsoleMeAppB

dynamic_config:
  # You can set this key in http://YOUR_CONSOLEME_DOMAIN/config as a rudimentary way to allow groups to access
  # roles before you override get_eligible_roles with your own custom logic
  group_mapping:
    mikec@remitly.com:
      roles:
        - arn:aws:iam::383328610803:role/ConsoleMeUserA
        - arn:aws:iam::383328610803:role/ConsoleMeUserB

policies:
  # is this the target role in the spoke account?
  role_name: ConsoleMeTarget

celery:
  active_region: us-west-1

# auth:
#   logout_redirect_url: "/"
#   get_user_by_aws_alb_auth: true
#   extra_auth_cookies:
#     - AWSELBAuthSessionCookie-0
#   set_auth_cookie: true
#   remote_ip:
#     trusted_remote_ip_header: X-Forwarded-For

# get_user_by_aws_alb_auth_settings:
#   jwt_email_key: email
#   jwt_groups_key: groups


# You can define support contact information and custom documentation here. This information is displayed in ConsoleMe's
# sidebar.
support_contact: security-team@remitly.com
support_chat_url: https://remitly.slack.com/archives/C0B5BJS90

# url: https://internal-consoleme-lb-1102925173.us-west-1.elb.amazonaws.com:80

logging_levels:
  asyncio: WARNING
  boto3: CRITICAL
  boto: CRITICAL
  botocore: CRITICAL
  elasticsearch.trace: ERROR
  elasticsearch: ERROR
  nose: CRITICAL
  parso.python.diff: WARNING
  s3transfer: CRITICAL
  spectator.HttpClient: WARNING
  spectator.Registry: WARNING
  urllib3: ERROR


# # SES configuration is necessary for ConsoleMe to send e-mails to your users. ConsoleMe sends e-mails to notify
# # administrators and requesters about policy requests applicable to them.
# ses:
#   support_reference: "Please contact us at consoleme@example.com if you have any questions or concerns."
#   arn: "arn:aws:ses:us-east-1:123456789012:identity/example.com"
#   region: "us-west-2"
#   consoleme:
#     name: ConsoleMe
#     sender: consoleme_test@example.com


# In your deployment, you'll probably want to move these to Dynamic Configuration at
# https://YOUR_CONSOLEME_DOMAIN/config
#permission_templates:
#   Reference the default values provided in consoleme/lib/defaults.py as PERMISSION_TEMPLATE_DEFAULTS


example_config:
  is_example_config: true
  title: "Warning:"
  text: |-
    This configuration has no authentication configured. Do not use in a production environment. Do not publicly expose this endpoint or your AWS environment will be compromised! Click [here](/generate_config) to generate a configuration.
  routes: .*
